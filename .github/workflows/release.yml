on:
  push:
    branches:
      - master

name: release

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - id: release
        uses: google-github-actions/release-please-action@v4
        with:
          release-type: maven
          package-name: com.redhat.cloud.common.insights-schemas-java-parent
  auto-merge-snapshot:
    needs: [ release ]
    runs-on: ubuntu-latest
    if: "${{ needs.release.outputs.pr && contains(fromJSON(needs.release.outputs.pr).labels, 'autorelease: snapshot') }}"
    steps:
      - id: auto-merge
        uses: "pascalgn/automerge-action@v0.15.6"
        env:
          MERGE_LABELS: "autorelease: snapshot"
          MERGE_METHOD: rebase
          MERGE_RETRIES: 10
          MERGE_RETRY_SLEEP: 10000
          PULL_REQUEST: ${{ fromJSON(needs.release.outputs.pr).number }}
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  publish:
    needs: [ release ]
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: adopt
          server-id: nexus
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "Available GPG keys:"
          gpg --list-secret-keys --keyid-format=long
          echo "Key ID from secret: ${{ secrets.GPG_KEY_ID }}"
          echo "Testing key access:"
          gpg --list-secret-keys "${{ secrets.GPG_KEY_ID }}" || echo "Key not found with ID: ${{ secrets.GPG_KEY_ID }}"

      - name: Publish package
        run: mvn deploy -Prelease -Dgpg.keyname="${{ secrets.GPG_KEY_ID }}" -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

